# services/streaming.py
import asyncio
import logging
from typing import Any, AsyncGenerator
from starlette.requests import Request

async def stream_agent_replies(
    request: Request,
    agent: Any,
    prompt: str,
    desired_source: str = "nong_khun"
) -> AsyncGenerator[bytes, None]:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á stream ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Agent ‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (string)
    ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô tool calls ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö list.
    """
    try:
        stream = agent.run_stream(task=prompt)

        async for event in stream:
            if await request.is_disconnected():
                logging.info("‚ö†Ô∏è Client disconnected. Stop streaming.")
                break

            try:
                # --- START: ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ---
                
                text_chunk = None

                # 1. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡∏à‡∏≤‡∏Å attribute ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                # ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ `delta` ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏ó‡∏¢‡∏≠‡∏¢‡∏™‡πà‡∏á‡∏°‡∏≤
                if hasattr(event, 'delta') and isinstance(event.delta, str):
                    text_chunk = event.delta
                
                # `content` ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô string (‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢) ‡∏´‡∏£‡∏∑‡∏≠ list (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô)
                # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string
                elif hasattr(event, 'content') and isinstance(event.content, str):
                    text_chunk = event.content
                
                # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡πÑ‡∏î‡πâ
                elif (hasattr(event, 'message') and 
                      hasattr(event.message, 'content') and 
                      isinstance(event.message.content, str)):
                    text_chunk = event.message.content

                # 2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ text_chunk ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠
                if text_chunk:
                    # (Optional) ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á source ‡∏≠‡∏¢‡∏π‡πà
                    src = getattr(event, "source", None)
                    if desired_source and src is not None and src != desired_source:
                        continue
                    
                    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
                    yield (text_chunk + "\n").encode("utf-8")

                # ‡∏ñ‡πâ‡∏≤ event ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô list ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏° event ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö event ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                
                # --- END: ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ---

            except Exception as e:
                logging.exception(f"Error processing stream event: {e}")
                continue
            
            await asyncio.sleep(0)

    except Exception as e:
        logging.error(f"üî¥ Failed to start agent stream: {e}")
        error_message = f"Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ\n"
        yield error_message.encode("utf-8")